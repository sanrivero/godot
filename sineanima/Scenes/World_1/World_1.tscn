[gd_scene load_steps=8 format=2]

[ext_resource path="res://Scenes/World_1/world_1.gd" type="Script" id=1]
[ext_resource path="res://Scenes/Effects/Leaf.tscn" type="PackedScene" id=2]
[ext_resource path="res://icon.png" type="Texture" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c) {
  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec3 baseColorFor(float time) {
    float i = mod(floor(time / 10.0), 2.0);
    float progress = mod(time, 10.0);
    
    vec3 one = vec3(0.0 / 255.0, 209.0 / 255.0, 193.0 / 255.0);
    vec3 two = vec3(123.0 / 255.0, 222.0 / 255.0, 90.0 / 255.0);

    
    if (i == 0.0) {
        if (progress > 8.0) {
          return mix(one, two, (progress - 8.0) / 2.0);
        } else {
          return one;
        }
    }
    
    //if (i == 1.0) {
        if (progress > 8.0) {
          return mix(two, one, (progress - 8.0) / 2.0);
        } else {
          return two;
        }
    //}
}

vec3 adjustSV(vec3 rgb, float s, float v) {
    vec3 hsv = rgb2hsv(rgb);
    hsv.y = s;
    hsv.z = v;
    return hsv2rgb(hsv);
}

vec3 colorFor(vec3 base, float uv) {
    vec3 first = base;
    
    vec3 second = adjustSV(base, .5, .9);
    vec3 third = adjustSV(base, .82, .56);
    vec3 fourth = adjustSV(base, .2, .96);

    //vec3 first = vec3(0.0 / 255.0, 209.0 / 255.0, 193.0 / 255.0);
    //vec3 second = vec3(110.0 / 255.0, 230.0 / 255.0, 217.0 / 255.0);
    //vec3 third = vec3(26.0 / 255.0, 143.0 / 255.0, 124.0 / 255.0);
    //vec3 fourth = vec3(193.0 / 255.0, 245.0 / 255.0, 240.0 / 255.0);
    // vec3 babu1 = vec3(0.0 / 255.0, 209.0 / 255.0, 193.0 / 255.0);
    
    float x4 = ((uv + 1.0) / 2.0) * 4.0;
    
    if (x4 <= 1.0) {
        return mix(first, second, mod(x4, 1.0));
    }
    
    if (x4 > 1.0 && x4 <= 2.0) {
        return mix(second, third, mod(x4, 1.0));
    }

    if (x4 > 2.0 && x4 <= 3.0) {
        return mix(third, fourth, mod(x4, 1.0));
    }

    //if (x4 > 3.0 && x4 <= 4.0) {
        return mix(fourth, first, mod(x4, 1.0));
    //}
}

void fragment()
{
    float speed = 0.3;
    float offset = 0.5;
    
    vec3 top_left = colorFor(baseColorFor(0.99 * TIME + sin(0.06 * TIME)), sin(speed * 0.06 * TIME + 1.0 + offset));
    vec3 top_right = colorFor(baseColorFor(0.98 * TIME + sin(0.16 * TIME)), sin(speed * 0.1 * TIME + 2.0 + offset));
        
    vec3 bottom_left = colorFor(baseColorFor(0.97 * TIME + sin(0.9 * TIME)), sin(speed * 0.12 * TIME + 5.0 + offset));
    vec3 bottom_right = colorFor(baseColorFor(0.96 * TIME + sin(0.5 * TIME)), sin(speed * 0.09 * TIME + 6.0 + offset));
    
    
    //vec3 top_left = mix(babu2, kazan3, 0.8 * sin(iTime));
    //vec3 top_right = mix(kazan1, babu2, 0.9 * sin(iTime));
        
    //vec3 bottom_left = mix(kazan2, babu1, 0.7 * sin(iTime));
    //vec3 bottom_right = mix(babu3, kazan2, 1.2 * sin(iTime));
    
	float ymix = FRAGCOORD.y / (1.0/SCREEN_PIXEL_SIZE.y);
    vec3 left = mix(top_left, bottom_left, ymix);
    vec3 right = mix(top_right, bottom_right, ymix);
    
    float xmix = FRAGCOORD.x / (1.0/ SCREEN_PIXEL_SIZE.x);
    
    COLOR = vec4(mix(left, right, xmix), 1.0);
    
	// fragColor = vec4(uv,0.5+1.5*sin(iTime),1.0);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform vec3 color1 = vec3(0.1,0.6,0.8);
uniform vec3 color2 = vec3(0.2,0.4,0.7);

uniform float distance_to_player;

void fragment(){
	
	float final_alpha;
	if(distance_to_player>0.1){
		final_alpha = distance_to_player;
	} else{
		final_alpha = 0.0;
	}
	//COLOR = vec4(1.0,1.0,1.0,final_alpha)
	
	vec3 final_color = vec3(0.0);
	float pc3 = abs(sin(TIME));
	
	final_color = mix(color1,color2,pc3);
	
	COLOR.rgb = final_color;
	
	
}

"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/color1 = Vector3( 0.1, 0.6, 0.8 )
shader_param/color2 = Vector3( 0.2, 0.5, 0.7 )
shader_param/distance_to_player = null

[node name="World_1" type="Node2D"]
script = ExtResource( 1 )

[node name="Zones" type="Node2D" parent="."]

[node name="Leaf" parent="." instance=ExtResource( 2 )]
visible = false

[node name="Background" type="Sprite" parent="."]
visible = false
material = SubResource( 2 )
position = Vector2( 298.722, 146.593 )
scale = Vector2( 9.93122, 4.54898 )
z_index = -2
texture = ExtResource( 3 )

[node name="Sprite" type="Sprite" parent="."]
visible = false
material = SubResource( 4 )
position = Vector2( 102.798, 102.798 )
scale = Vector2( 4.21244, 4.21244 )
texture = ExtResource( 3 )
[connection signal="room_changed" from="." to="." method="_on_World_1_room_changed"]
